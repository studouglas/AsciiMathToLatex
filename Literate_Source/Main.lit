@code_type Swift .swift
@compiler swiftc
@add_css literature_style_override.css
@title Main | AsciiMath to LaTeX Converter

@s Module Structure
The entry point to the program, our main file will take in the AsciiMath equation from stdin, and initialize the
the parsing process. If the parser is successful, the LaTeX output will then be printed to the console. Note that 
this file acts as a script, and is not encapsulated in a class. As such, the lines will be executed sequentially
starting from the top.
--- main.swift
@{Imports}
@{Process input}
@{Parse equation}
@{Print output}
---

@s Imports
Exiting the program early as well as trimming whitepsace requires the Foundation package.
--- Imports
import Foundation
---

@s Processing Input
Convert the input into a manageable string, removing any unnecessary leading and trailing whitespace. Alert
user and exit if no input was passed.
--- Process input
if Process.argc != 2 {
	println("Usage: ./AsciiMathToLatex 'AsciiMath Equation Here'\n(note the single quotation marks)")
	exit(1)
} 
let rawInputText = String.fromCString(Process.unsafeArgv[1])
let asciiMathText = rawInputText!.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
---

@s Parsing equation
At this point, our input equation is ready for parsing. We create a new parser object with the input equation,
and it then parses the input. If an error was encountered, the program exits. Note that the actual precise (and more useful)
error is output to the console during the parsing process.
--- Parse equation
let parser = Parser(amEquation: asciiMathText)
if !parser.parseInput() {
	println("Error parsing equation '\(asciiMathText)'. Exiting...")
	exit(2)
}
---

@s Outputting LaTeX
Once the input's been parsed and an AST has been generated, we call the appropriate method on our parser to convert
its AST to LaTeX and print it to the console. After this is done, the program exits.
--- Print output
println(parser.convertToLatex())
---
