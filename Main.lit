@code_type Swift .swift
@compiler swiftc
@add_css literature_style_override.css
@title AsciiMath to LaTeX Converter

@s Introduction
AsciiMathToLatex takes a math equation written in [AsciiMath](http://asciimath.org)
as input and converts it into valid LaTeX source. The tool first parses the AsciiMath input, outputting syntax errors 
as they are encountered. It then generates an AST representing the equation which is converted into LaTeX math notation
and output as text to the console.

The purpose of the project is to allow for a simpler, more readable syntax for math equations to be used with 
the superior typesetting abilities of LaTeX. 

In terms of formatting, LaTeX is unparalleled for complex math equations. As such, it has become the industry 
standard and is widely used and supported throughout academia and in math-related fields. Personally, I've
been using LaTeX for several years and continue to use it to format math equations and take notes.

However, the syntax to write these math equations is verbose, difficult-to-read, and slow to type. AsciiMath is
a language that implements a subset of LaTeX's math functionality and is used for displaying math equations in
HTML documents. It uses a much simpler syntax that prefers spaces and parentheses over braces and 
backslashes and saves the user keystrokes by requiring less explicit instructions.

@s Usage
The AsciiMathToLatex executable takes an equation written in AsciiMath notation from <code>stdin</code> and prints out the 
converted LaTeX source code. For example, running:<br>
`echo 'x/y + sqrt(beta)' | ./AsciiMathToLatex`

will output the following LaTeX code:<br>
`\frac{x}{y} + \sqrt{\beta}`

@s Installation Guide
All the source code for <emph>AsciiMathToLatex</emph> as well as all the documentation (including this document) were created using [Literate](http://literate.zbyedidia.webfactional.com), 
a tool for writing programs using the [literate programming](http://www.literateprogramming.com) method. That means that the source code is contained alongside
the documentation within the <code>.lit</code> files. Running the Literate program will generate both the <code>.swift</code> source files that make
up the project and the HTML files that form the documentation. After the <code>.swift</code> files are generated by Literate, the Swift compiler is
used to create the executable.

**Literate**<br>
Download and install Literate from their [downloads page](http://literate.zbyedidia.webfactional.com/download.php)

**Swift Compiler**<br>
-OS X users can install the swift compiler, <code>swiftc</code>, by installing [Xcode](https://www.google.ca/search?client=safari&rls=en&q=install+xcode&ie=UTF-8&oe=UTF-8&gfe_rd=cr&ei=7hn_VravBYON8QfU77HgDg)<br>
-Linux users can install Swift from the compiler [homepage](https://swift.org/getting-started/#using-the-repl) 

**AsciiMathToLatex**<br>
1. Navigate to the project directory in the Terminal
2. Generate the source code and documentation from the Literate files by running 'lit *.lit'
3. Compile the swift files with 'xcrun swiftc -sdk $(xcrun --show-sdk-path --sdk macosx) *.swift -o AsciiMathToLatex'

@s Module Structure
The entry point to the program, our main file will take in the AsciiMath equation from stdin, and initialize the
the parsing process. If the parser is successful, the LaTeX output will then be printed to the console. Note that 
this file acts as a script, and is not encapsulated in a class. As such, the lines will be executed sequentially
starting from the top.
--- main.swift
@{Imports}
@{Process input}
@{Print output}
---

@s Imports
The input is read from stdin, which requires the Foundation package.
--- Imports
import Foundation
---

@s Processing Input
Initially, the program will read the equation from stdin and save it to `inputData` before initializing the parsing process.
--- Process input
let stdin = NSFileHandle.fileHandleWithStandardInput()
let inputData = stdin.availableData;
@{Check input}
@{Parse equation}
---

Convert the input into a manageable string, removing any unnecessary leading and trailing whitespace. Alert
user and exit if no input was passed.
--- Check input
let rawInputText = NSString(data: inputData, encoding: NSUTF8StringEncoding)
if (rawInputText == nil) {
    println("Usage: 'echo 'x + y' | ./main")
    exit(1)
}

let asciiMathText = rawInputText!.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
---

@s Parsing equation
At this point, our input equation is ready for parsing. We create a new parser object with the input equation,
and it then parses the input. If an error was encountered, the program exits. Note that the actual precise (and more useful)
error is output to the console during the parsing process.
--- Parse equation
let parser = Parser(amEquation: asciiMathText)
if !parser.parseInput() {
	println("Error parsing equation '\(asciiMathText)'. Exiting...")
	exit(2)
}
---

@s Outputting LaTeX
Once the input's been parsed and an AST has been generated, we call the appropriate method on our parser to convert
its AST to LaTeX and print it to the console. After this is done, the program exits.
--- Print output
println(parser.convertToLatex())
---
