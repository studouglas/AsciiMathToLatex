@code_type Swift .swift
@comment_type /* %s */
@compiler swiftc
@add_css literature_style_override.css

@title AsciiMath to Latex - Project Proposal<br><span class="subtitle">Stuart Douglas - 1214422<br>March 2nd, 2016</span>

@s Overview
The proposed project takes a math equation written in [AsciiMath](http://asciimath.org)
as input and converts it into valid LaTeX source. The tool first parses the AsciiMath input, outputting syntax errors 
as they are encountered. It then generates an AST representing the equation which is converted into LaTeX math notation and output as text.

The purpose of the project is to allow for a simpler, more readable syntax for math equations to be used with 
the superior typesetting abilities of LaTeX. Initially, a command-line tool will be created to perform this 
task. In the future, a LaTeX package will potentially be made that supports math input using AsciiMath. Additionally, 
an Automator service for OS X users will be created that takes an AsciiMath equation as input, 
converts it into LaTeX, and passes it to the [LaTeXiT](http://www.chachatelier.fr/latexit/) service. This will allow 
users to quickly generate a well-typeset equation for inclusion in a wide variety of documents.

@s Motivation
In terms of formatting, LaTeX is unparalleled for complex math equations. As such, it has become the industry 
standard and is widely used and supported throughout academia and in math-related fields. Personally, I've
been using LaTeX for several years and continue to use it to format math equations and take notes.

However, the syntax to write these math equations is verbose, difficult-to-read, and slow to type. AsciiMath is
a language that implements a subset of LaTeX's math functionality and is used for displaying math equations in
HTML documents. It uses a much simpler syntax that prefers spaces and parentheses over braces and 
backslashes and saves the user keystrokes by requiring less explicit instructions.

@s Background
AsciiMath was developed in 2007 to allow users to generate MathML code (a language for writing math equations on the web) 
with a simple, linear syntax [[1]](https://www.heacademy.ac.uk/asciimathml-now-everyone-can-type-mathml). AsciiMath is 
integrated with [MathJax](https://www.mathjax.org/#features), a popular javascript library for typesetting math which also 
supports LaTeX input.

There are currently no available tools to convert text from the AsciiMath format to LaTeX. It is my hope that this project
will help other students and LaTeX users write beautiful formulae quickly and with little prior knowledge.

@s Example of Equations in AsciiMath and LaTeX
Take the following simple equation:<br>
<span class="center">$\sum_{i=1}^n i^3 = \left(\frac{n(n+1)}{2}\right)^2$</span>

In LaTeX, we write the equation as:
<span class="center">
--- Simple equation in LaTeX
\sum_{i=1}^n i^3 = \left(\frac{n(n+1)}{2}\right)^2
---
</span>

Whereas in AsciiMath, we write:
<span class="center">
--- Simple equation in AsciiMath
sum_(i=1)^n i^3=((n(n+1))/2)^2
---
</span>

The AsciiMath version has significantly fewer characters than in LaTeX (30 vs. 50) and appears much closer to 
how one would naturally express the equation using a keyboard. In addition, the lack of curly braces makes it much 
easier to read and type.

Matrices in AsciiMath are even simpler; we can represent the following $2 \times 2$ matrix in just a few 
characters:<br>
<span class="center">$\left[\begin{array}{cc}a & b\\c & d\end{array}\right]$</span>

In LaTeX, we write the equation as:
<span class="center">
--- Simple matrix in LaTeX
\left[
\begin{array}{cc}
a & b\\
c & d
\end{array}
\right]
---
</span>

Whereas in AsciiMath, we simply write:
<span class="center">
--- Simple matrix in AsciiMath
[[a,b],[c,d]]
---
</span>

There are numerous other examples that illustrate the improved syntax of AsciiMath; more information can be found at the 
[AsciiMath](http://asciimath.org) homepage.

@s Tools and Languages
The project will be developed in the literate programming style using the [Literate](http://literate.zbyedidia
.webfactional.com/index.php) tool. This document was generated using Literate, which takes a markdown 
text file as input and generates both an HTML document and a source code file. After researching 
several language-agnostic literate programming tools, I chose Literate due to its support for inline math 
equations, its simple interface, and its ability to generate multiple source code files from one .lit file.

The compiler will be written in Swift, a modern object-oriented programming language with 
some functional aspects. Swift was chosen for a variety of reasons, including my experience with it, its 
strong focus on safety, and its speed.

@s Resources
The core resource for AsciiMath is their [homepage](http://asciimath.org), where a formal definition of the grammar
is presented along with a listing of all possible commands. For Literate, the 
[user manual](http://literate.zbyedidia.webfactional.com/manual.php) will be the primary resource used.

Dr. Sekerinski's Pascal0 compiler will be referred to throughout development of the compiler. It will
mainly be used to guide the high-level design of the compiler.

Other references used will be the [Swift Programming Language](https://swift.org/documentation/) eBook, and [Modern Compiler
Design](http://link.springer.com/book/10.1007%2F978-1-4614-4699-6). All sources will be cited when used.

@s Testing
The majority of testing will be done in a black-box fashion. A script will be created that compiles a variety of AsciiMath formulae to LaTeX
source and compares the results with the correct LaTeX code.

To generate the formulae and their corresponding AsciiMath and LaTeX representations for these examples, MathJax will be used.
MathJax is an open-source javascript library for typesetting math equations on the web, supporting input in both LaTeX and 
AsciiMath. The [MathJax](https://www.mathjax.org/#features) website includes a live typesetting tool that allows users to 
enter LaTeX and AsciiMath code. This tool will be used before creating the black-box tests to verify the correct LaTex code
that corresponds with the AsciiMath input.

